name: Simple Build + JSON check (last commit)

on:
  push:
    branches: [ main ]

jobs:
  build-and-validate:
    runs-on: ubuntu-latest

    env:
      BEFORE: ${{ github.event.before }}
      SHA: ${{ github.sha }}

    steps:
    - name: Checkout (full history for git diff)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Get changed files in last push
      id: changed
      run: |
        set -euo pipefail

        if [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
          echo "First push (no parent). Listing files from commit $SHA"
          files=$(git show --name-only --pretty="" "$SHA" | sed '/^$/d')
        else
          files=$(git diff --name-only "$BEFORE" "$SHA" || true)
        fi

        files="$(echo "$files" | sed '/^$/d' || true)"
        echo "files<<EOF" >> $GITHUB_OUTPUT
        echo "$files" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Validate changed JSON files (if any)
      run: |
        set -euo pipefail
        changed="${{ steps.changed.outputs.files }}"

        if [ -z "$changed" ]; then
          echo "No changed files in last commit. Skipping JSON validation."
          exit 0
        fi

        jsons=$(printf "%s\n" "$changed" | grep -E '\.json$' || true)
        if [ -z "$jsons" ]; then
          echo "No JSON files changed in the last commit."
          exit 0
        fi

        echo "Validating JSON files from last commit:"
        printf "%s\n" "$jsons"
        while IFS= read -r jf; do
          [ -z "$jf" ] && continue
          if [ ! -f "$jf" ]; then
            echo "⚠️  $jf not found in workspace (skipping)"
            continue
          fi
          echo "Checking $jf"
          if python -m json.tool "$jf" > /dev/null 2>&1; then
            echo "✅ $jf is valid"
          else
            echo "❌ $jf contains invalid JSON"
            python -m json.tool "$jf" 2>&1 || true
            exit 1
          fi
        done <<< "$jsons"

    - name: Build solution or project
      run: |
        set -euo pipefail
        echo "Looking for a solution (.sln) or project (.csproj) to build..."

        sln=$(find . -type f -name "*.sln" | head -n 1 || true)
        if [ -n "$sln" ]; then
          echo "Found solution: $sln"
          dotnet build "$sln" --verbosity minimal
          echo "✅ Solution build succeeded"
          exit 0
        fi

        csproj=$(find . -type f -name "*.csproj" | head -n 1 || true)
        if [ -n "$csproj" ]; then
          echo "No .sln found. Building project: $csproj"
          dotnet build "$csproj" --verbosity minimal
          echo "✅ Project build succeeded"
          exit 0
        fi

        echo "No .sln or .csproj found in repository — nothing to build."
        exit 0
